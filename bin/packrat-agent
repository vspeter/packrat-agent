#!/usr/bin/env python3

import sys
import configparser
import logging
import time
from packratAgent.libdaemon import Daemon
from packratAgent.libRepo import FileSystemMirror
from packratAgent.Packrat import Packrat


class PackratAgent( Daemon ):
  def __init__( self, interactive ):
    super().__init__( 'packratAgent', '/var/run/packratAgent.pid', interactive, '/var/log/packratAgent.err' )
    self.mirror = None
    self.full_sync_interval = 900
    self.cont = True

  def main( self ):
    count = -1
    logging.info( 'Starting...' )
    if not self.cont:
      return True

    logging.info( 'Starting Pollers...' )
    self.mirror.startPollers()
    logging.info( 'Running...' )
    while self.cont:
      count = ( count + 1 ) % 8
      logging.debug( 'Full Sync...' )
      if not self.mirror.fullSync( count == 0 ):
        logging.error( 'Sync Failed, bailing...' )
        self.do_stop()

      if not self.mirror.checkPollers():
        logging.error( 'Poller(s) died, bailing...' )
        self.do_stop()

      delay = self.full_sync_interval
      while delay and self.cont:
        time.sleep( 1 )
        delay -= 1

      if not self.cont:
        break

    logging.info( 'Waiting for Pollers...' )
    self.mirror.waitForPollers()
    logging.info( 'Done.' )
    return True

  def do_stop( self ):
    logging.info( 'Stopping...' )
    self.cont = False
    if self.mirror is not None:
      self.mirror.stopPollers()

  def do_loadconfig( self ):
    logging.info( 'Loading Config...' )
    config = configparser.ConfigParser()
    try:
      if not config.read( '/etc/packrat/mirror.conf' ):
        logging.critical( 'Error opening config file' )
        return False

    except Exception:
      logging.exception( 'Error Parsing config file' )
      return False

    try:
      proxy = config.get( 'packrat', 'proxy' )
      if not proxy:
        proxy = None
    except configparser.Error:
      proxy = None

    try:
      packrat = Packrat( config.get( 'packrat', 'host' ), proxy, config.get( 'packrat', 'name' ), config.get( 'packrat', 'psk' ) )
    except configparser.Error:
      logging.exception( 'Error retreiving host, proxy, name, and/or psk from config file' )
      return False

    try:
      self.full_sync_interval = config.getint( 'mirror', 'full_sync_interval' )
    except configparser.Error:
      logging.exception( 'Error retreiving full_syn_interval from config file' )
      return False

    try:
      description = config.get( 'mirror', 'description' )
    except configparser.Error:
      logging.exception( 'Error retreiving description from config file' )
      return False

    try:
      state_db = config.get( 'mirror', 'state_db' )
    except configparser.Error:
      logging.exception( 'Error retreiving repo_db from config file' )
      return False

    try:
      root_dir = config.get( 'mirror', 'root_dir' )
    except configparser.Error:
      logging.exception( 'Error retreiving root_dir from config file' )
      return False

    try:
      gpg_key = config.get( 'mirror', 'gpg_sign_key' )
      if not gpg_key:
        gpg_key = None
    except configparser.Error:
      gpg_key = None

    try:
      keep_file_list = config.get( 'mirror', 'keep_file_list' ).split( ',' )
    except configparser.Error:
      keep_file_list = []

    self.mirror = FileSystemMirror( packrat, state_db, root_dir, gpg_key, description, keep_file_list )

    return True


def print_usage():
  print( 'Usage {0} {{interactive|start|stop|kill|restart|reload_config|status}}'.format( sys.argv[0] ) )


try:
  mode = sys.argv[1]
except IndexError:
  print_usage()
  sys.exit( 1 )

interactive = ( mode == 'interactive' )

daemon = PackratAgent( interactive )

if mode == 'stop':
  if not daemon.stop():
    sys.exit( 1 )
  sys.exit( 0 )

if mode == 'kill':
  if not daemon.kill():
    sys.exit( 1 )
  sys.exit( 0 )

if mode == 'status':
  print( 'Status: {0}'.format( daemon.status() ) )
  sys.exit( 0 )

if mode == 'restart':
  if not daemon.restart():
    sys.exit( 1 )
  sys.exit( 0 )

if mode == 'reload_config':
  if not daemon.reload_config():
    sys.exit( 1 )
  sys.exit( 0 )

if interactive or mode == 'start':
  if not daemon.start():
    sys.exit( 1 )
  sys.exit( 0 )

print_usage()
sys.exit( 1 )
